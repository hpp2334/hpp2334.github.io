<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hpp2334&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/4ac7613d79aa07cdfc625a8c051e0f00</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hpp2334.github.io/"/>
  <updated>2020-05-21T17:08:36.940Z</updated>
  <id>http://hpp2334.github.io/</id>
  
  <author>
    <name>hpp2334</name>
    <email>hpp2334@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise | Promise的简易实现</title>
    <link href="http://hpp2334.github.io/2020/05/21/20200521_promise-implementation/"/>
    <id>http://hpp2334.github.io/2020/05/21/20200521_promise-implementation/</id>
    <published>2020-05-21T12:56:59.000Z</published>
    <updated>2020-05-21T17:08:36.940Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文根据Promise/A+规范实现一个简易的Promise</p></blockquote><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://hpp2334-1252277898.cos.ap-guangzhou.myqcloud.com/0a6a0f6e-73f2-5b06-b32a-a403ef9c737d.png" alt="Cover" title="">                </div>                <div class="image-caption">Cover</div>            </figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将简述Promise的作用，并较为详细的讲述基于Promise/A+规范实现一个简易的Promise，在其中会加入个人的一些理解（当然只是学习前端两个月的萌新 QAQ）。</p><p>以下是一些参考资料：</p><ol><li><p>Promise: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p></li><li><p>Promises/A+: <a href="https://promisesaplus.com/" target="_blank" rel="noopener">https://promisesaplus.com/</a></p></li></ol><h2 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h2><h2 id="Promise的简易实现"><a href="#Promise的简易实现" class="headerlink" title="Promise的简易实现"></a>Promise的简易实现</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h3 id="2-1-Promise-States"><a href="#2-1-Promise-States" class="headerlink" title="2.1 Promise States"></a>2.1 Promise States</h3><h4 id="状态取值"><a href="#状态取值" class="headerlink" title="状态取值"></a>状态取值</h4><p>Promise的状态（Promise States）有三种取值：<code>pending</code>, <code>fulfilled</code>, <code>rejected</code>。 { 2.1 }</p><p>状态为<code>fulfileed</code>的Promise有一个值<code>value</code>，状态为<code>rejected</code>的Promise有一个值<code>reason</code>，<code>value</code>和<code>reason</code>都是不可改变的。（此处<em>不可改变</em>指的是JavaScript中的<code>===</code>成立，而不是深层次的比较，也就是说内部属性值是可以改变的，如同一个对象从<code>{a: 1}</code>变为了<code>{a: 0}</code>） { 2.1.2, 2.1.3 }</p><p>一般，<code>fulfilled</code>是Promise成功时的状态取值，<code>value</code>可认为是成功时Promise内部计算得到的值；<code>rejected</code>是Promise失败时的状态取值，<code>reason</code>可以认为是Promise失败的原因。</p><p>此部分代码与下一部分合并。</p><h4 id="状态转变"><a href="#状态转变" class="headerlink" title="状态转变"></a>状态转变</h4><p>一个处于<code>pending</code>状态的Promise，成功时转变为<code>fulfilled</code>，失败时转变为<code>rejected</code>。并且，一个状态为<code>fulfilled</code>或<code>rejected</code>的Promise不能转变为其他状态。</p><p>这里来看看代码如何实现当前的部分。到此处，稍微难一些的点只在于<strong>状态转变</strong>与<strong>保持<code>value</code>与<code>reason</code>不变</strong>。</p><p>可以实现<code>Promise.prototype[FUNC_FULFILL]</code>方法实现到<code>fulfilled</code>状态的转变，<code>Promise.prototype[FUNC_REJECT]</code>方法实现到<code>rejected</code>状态的转变，在两个方法内部都先判定以下状态是不是<code>pending</code>，是才修改状态，设置<code>value</code>或<code>reason</code>。我们只通过上述两个方法实现Promise的状态转变，由于状态的判定和设置，易知对于同一个Promise，当两个方法中的一个执行了内部逻辑，以后两个方法的内部逻辑都不会被执行。于是，两个稍微难一些的目标就能够简单的达成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 Promise States</span></span><br><span class="line"><span class="keyword">const</span> [ FULFILLED, PENDING, REJECTED ] = [ <span class="string">'FULFILLED'</span>, <span class="string">'PENDING'</span>, <span class="string">'REJECTED'</span> ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = PENDING;  <span class="comment">// 2.1 Promise States</span></span><br><span class="line">  <span class="keyword">this</span>.value = <span class="literal">null</span>;      <span class="comment">// 2.1.2.2 must have a value, which must not change.</span></span><br><span class="line">  <span class="keyword">this</span>.reason = <span class="literal">null</span>;     <span class="comment">// 2.1.3.2 must have a reason, which must not change.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype[FUNC_FULFILL] = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 2.1.1.1 When pending, a promise: may transition to either the fulfilled or rejected state.</span></span><br><span class="line">  <span class="comment">// 2.1.2.1 When fulfilled, a promise: must not transition to any other state.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = FULFILLED;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype[FUNC_REJECT] = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 2.1.3.1 must not transition to any other state.</span></span><br><span class="line">  <span class="comment">// 2.1.3.2 must have a reason, which must not change.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">    <span class="keyword">this</span>.reason = reason;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./card.png" alt="card" title="">                </div>                <div class="image-caption">card</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文根据Promise/A+规范实现一个简易的Promise&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="JavaScript Basic" scheme="http://hpp2334.github.io/tags/JavaScript-Basic/"/>
    
  </entry>
  
</feed>
